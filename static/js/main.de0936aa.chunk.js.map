{"version":3,"sources":["constants/note.js","utils/isAccidentalNote.js","utils/getKeyboardShortcutsForNote.js","Keyboard/AudioContext.js","Keyboard/AudioPlayer.js","Keyboard/InstrumentAudio.js","Instrument.js","utils/getNotesBetween.js","Piano.js","App.js","serviceWorker.js","index.js"],"names":["TONES","OCTAVE_NUMBERS","reduce","notes","octaveNumber","notesInOctave","map","tone","note","NOTES","includes","getKeyboardShortcutsForNote","keyboardMap","Object","keys","filter","shortcut","window","AudioContext","webkitAudioContext","NullSoundFontPlayerNoteAudio","stop","NullSoundFontPlayer","play","AudioPlayer","audioContext","soundFPlayer","setInstrument","instrumentName","SoundFontPlayer","instrument","then","soundFontPlayer","catch","e","playNote","InstrumentAudio","useState","instrumentPlayer","setInstrumentPlayer","useEffect","playNotes","length","isRegularKey","event","ctrlKey","metaKey","shiftKey","Instrument","startNote","endNote","renderPianoKey","startingIndex","indexOf","endingIndex","slice","getNotesBetween","notesPlaying","state","setState","addEventListener","handleKeyDown","handleKeyUp","getNoteFromKeyboardKey","keyboardKey","toUpperCase","repeat","key","notePlaying","isAccidentalNote","isNotePlaying","startPlayingNote","onPlayNoteStart","stopPlayingNote","onPlayNoteEnd","keyboardShortcut","Piano","accidentalKey","isPlaying","text","eventHandlers","className","naturalKey","KeyComponent","onMouseDown","onMouseUp","onTouchStart","onMouseOut","onTouchEnd","join","Q","2","W","3","E","R","5","T","6","Y","7","U","I","9","O","0","P","Z","S","X","D","C","F","V","B","H","N","J","M","L","A","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de0936aa.chunk.js","sourcesContent":["const TONES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\nconst OCTAVE_NUMBERS = [1, 2, 3, 4, 5, 6, 7];\n\nexport default OCTAVE_NUMBERS.reduce((notes, octaveNumber) => {\n  const notesInOctave = TONES.map(tone => `${tone}${octaveNumber}`);\n  return [...notes, ...notesInOctave];\n}, []);\n","import NOTES from '../constants/note'\nexport default (note) => {\n    return NOTES.includes(note) && note.includes('#')\n}","\n\nexport const  getKeyboardShortcutsForNote = (keyboardMap, note) => {\n    const keyboardShortcuts = Object.keys(keyboardMap);\n    return keyboardShortcuts.filter(shortcut => keyboardMap[shortcut] === note);\n  }","export default window.AudioContext || window.webkitAudioContext;\n","import SoundFontPlayer from \"soundfont-player\";\nimport AudioContext from \"./AudioContext\";\n\nconst NullSoundFontPlayerNoteAudio = {\n  stop() {}\n};\n\nconst NullSoundFontPlayer = {\n  play() {\n    return NullSoundFontPlayerNoteAudio;\n  }\n};\n\nconst AudioPlayer = () => {\n  const audioContext = AudioContext && new AudioContext();\n\n  let soundFPlayer = NullSoundFontPlayer;\n\n  const Player = {\n    setInstrument(instrumentName) {\n      SoundFontPlayer.instrument(audioContext, instrumentName)\n        .then(soundFontPlayer => {\n          soundFPlayer = soundFontPlayer;\n        })\n        .catch(e => {\n          soundFPlayer = NullSoundFontPlayer;\n        });\n    },\n    playNote(note) {\n      return soundFPlayer.play(note);\n    }\n  };\n\n  return Player;\n};\n\nexport default AudioPlayer;\n","import React, { useEffect, useState } from \"react\";\nimport AudioPlayer from \"./AudioPlayer\";\n\nconst InstrumentAudio = ({ instrumentName, notes }) => {\n  const [instrumentPlayer, setInstrumentPlayer] = useState(null);\n  useEffect(() => {\n    setInstrumentPlayer(AudioPlayer());\n  }, []);\n\n  useEffect(() => {\n    if (instrumentPlayer) {\n      setInstrument();\n      playNotes();\n    }\n  }, [instrumentPlayer]);\n\n  useEffect(() => {\n    if (notes && notes.length > 0) {\n      playNotes();\n    }\n  }, [notes]);\n\n  const setInstrument = () => {\n    instrumentPlayer.setInstrument(instrumentName);\n  };\n\n  const playNotes = () => {\n    if (instrumentPlayer) {\n      instrumentPlayer.playNote(notes[0]);\n    }\n  };\n\n  return null;\n};\n\nexport default InstrumentAudio;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport isAccidentalNote from \"./utils/isAccidentalNote\";\nimport { getKeyboardShortcutsForNote } from \"./utils/getKeyboardShortcutsForNote\";\nimport InstrumentAudio from \"./Keyboard/InstrumentAudio\";\nimport getNotesBetween from \"./utils/getNotesBetween\";\n\nconst isRegularKey = event => {\n  return !event.ctrlKey && !event.metaKey && !event.shiftKey;\n};\nconst Instrument = ({\n  instrumentName,\n  startNote,\n  endNote,\n  renderPianoKey,\n  keyboardMap\n}) => {\n  const notes = getNotesBetween(startNote, endNote);\n\n  const [state, setState] = useState({\n    notesPlaying: []\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n  }, []);\n\n  const getNoteFromKeyboardKey = keyboardKey => {\n    return keyboardMap[keyboardKey.toUpperCase()];\n  };\n\n  const handleKeyDown = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n      if (note) {\n        setState({ ...state, notesPlaying: [...state.notesPlaying, note] });\n      }\n    }\n  };\n\n  const handleKeyUp = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n      if (note) {\n        setState({\n          ...state,\n          notesPlaying: state.notesPlaying.filter(\n            notePlaying => notePlaying !== note\n          )\n        });\n      }\n    }\n  };\n\n  const onPlayNoteStart = note => {\n    setState({ ...state, notesPlaying: [...state.notesPlaying, note] });\n  };\n\n  const onPlayNoteEnd = note => {\n    setState({\n      ...state,\n      notesPlaying: state.notesPlaying.filter(\n        notePlaying => notePlaying !== note\n      )\n    });\n  };\n\n  //rendering piano keys\n  return (\n    <Fragment>\n      {notes.map(note => {\n        return (\n          <Fragment key={note}>\n            {renderPianoKey({\n              note,\n              isAccidentalNote: isAccidentalNote(note),\n              isNotePlaying: state.notesPlaying.includes(note),\n              startPlayingNote: () => onPlayNoteStart(note),\n              stopPlayingNote: () => onPlayNoteEnd(note),\n              keyboardShortcut: getKeyboardShortcutsForNote(keyboardMap, note)\n            })}\n          </Fragment>\n        );\n      })}\n\n      <InstrumentAudio\n        instrumentName={instrumentName}\n        notes={state.notesPlaying}\n      />\n    </Fragment>\n  );\n};\n\nexport default Instrument;\n","import NOTES from '../constants/note';\n\nexport default function getNotesBetween(startNote, endNote) {\n  const startingIndex = NOTES.indexOf(startNote);\n  const endingIndex = NOTES.indexOf(endNote);\n  return NOTES.slice(startingIndex, endingIndex + 1);\n}\n","import React, { Fragment } from \"react\";\nimport Instrument from \"./Instrument\";\n\nconst Piano = () => {\n  const accidentalKey = ({ isPlaying, text, eventHandlers }) => {\n    return (\n      <div className=\"piano-accidental-key-wrapper\">\n        <button\n          className={`piano-accidental-key ${\n            isPlaying ? \"piano-accidental-key-playing\" : \"\"\n          } `}\n          {...eventHandlers}\n        >\n          <div className=\"piano-text\">{text}</div>\n        </button>\n      </div>\n    );\n  };\n\n  const naturalKey = ({ isPlaying, text, eventHandlers }) => {\n    return (\n      <button\n        className={`piano-natural-key ${\n          isPlaying ? \"piano-natural-key-playing\" : \"\"\n        } `}\n        {...eventHandlers}\n      >\n        <div className=\"piano-text\">{text}</div>\n      </button>\n    );\n  };\n\n  const renderPianoKey = ({\n    isAccidentalNote,\n    isNotePlaying,\n    startPlayingNote,\n    stopPlayingNote,\n    keyboardShortcut\n  }) => {\n    const KeyComponent = isAccidentalNote ? accidentalKey : naturalKey;\n\n    const eventHandlers = {\n      onMouseDown: startPlayingNote,\n      onMouseUp: stopPlayingNote,\n      onTouchStart: startPlayingNote,\n      onMouseOut: stopPlayingNote,\n      onTouchEnd: stopPlayingNote\n    };\n\n    return (\n      <KeyComponent\n        isPlaying={isNotePlaying}\n        text={keyboardShortcut.join(\"/\")}\n        eventHandlers={eventHandlers}\n      />\n    );\n  };\n\n  return (\n    <div className=\"piano-container\">\n      <Instrument\n        instrumentName={\"acoustic_grand_piano\"}\n        startNote={\"C3\"}\n        endNote={\"B5\"}\n        renderPianoKey={renderPianoKey}\n        keyboardMap={{\n          Q: \"C3\",\n          2: \"C#3\",\n          W: \"D3\",\n          3: \"D#3\",\n          E: \"E3\",\n          R: \"F3\",\n          5: \"F#3\",\n          T: \"G3\",\n          6: \"G#3\",\n          Y: \"A3\",\n          7: \"A#3\",\n          U: \"B3\",\n          I: \"C4\",\n          9: \"C#4\",\n          O: \"D4\",\n          0: \"D#4\",\n          P: \"E4\",\n          Z: \"F4\",\n          S: \"F#4\",\n          X: \"G4\",\n          D: \"G#4\",\n          C: \"A4\",\n          F: \"A#4\",\n          V: \"B4\",\n          B: \"C5\",\n          H: \"C#5\",\n          N: \"D5\",\n          J: \"D#5\",\n          M: \"E5\",\n          \",\": \"F5\",\n          L: \"F#5\",\n          \".\": \"G5\",\n          \";\": \"G#5\",\n          \"/\": \"A5\",\n          \"'\": \"A#5\",\n          A: \"B5\"\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Piano;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Piano from \"./Piano\";\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Piano />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}